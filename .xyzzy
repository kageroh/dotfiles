(load-library "Gates")
(setq *status-bar-format* "cuT")
(setq *keyword-load-path* '("E:/Program Files/xyzzy/keyword/"))

; popup
(require "dabbrev")
(global-set-key #\C-\; 'dabbrev-popup)
(setq *popup-completion-list-default* :always)
(setq *minibuffer-popup-completion-list* :never)

; lisp-mode
(pushnew '(".xyzzy$" . lisp-mode) *auto-mode-alist* :test 'equal)
(pushnew '("javascript\\+DOM$" . lisp-mode) *auto-mode-alist* :test 'equal)
(pushnew '("CSS$" . lisp-mode) *auto-mode-alist* :test 'equal)
(pushnew '("HTML$" . lisp-mode) *auto-mode-alist* :test 'equal)

; buffer
(setq *next-buffer-in-tab-order* t)
(global-set-key #\M-Down 'next-buffer)
(global-set-key #\M-Up 'previous-buffer)

; window
(global-set-key #\M-PageUp 'move-previous-window)
(global-set-key #\M-PageDown 'other-window)

; agile
(defun auto-reload-firefox-toggle ()
  (interactive)
  (message "Auto Reload Firefox ~A."
		   (or (when (add-hook '*after-save-buffer-hook* 'auto-reload-firefox) "ON")
			   (when (delete-hook '*after-save-buffer-hook* 'auto-reload-firefox) "off"))))
(defun auto-reload-firefox ()
  (let ((file (get-buffer-file-name)))
	(and file
		 (member (pathname-type file) '("css" "html" "js" "xml") :test 'equalp)
		 (shell-execute "E:/src/xrea/diary/2010/minify.vbs" t))))
(global-set-key #\C-F5 'auto-reload-firefox-toggle)

; indent
(defun indent-current-buffer ()
  (interactive)
  (indent-region (point-min) (point-max))
  (message "indent buffer"))
(global-set-key #\C-F8 'indent-current-buffer)

; datetime
(defun insert-my-date-string ()
  (interactive)
  (insert (format-date-string "%Y-%m-%dT%H:%M:%S%#Z")))
(global-set-key #\C-F9 'insert-my-date-string)

; net-installer
(require "ni/setup")
(ni-autoload)
; (setq ni::*http-proxy-host* "proxy.host")
; (setq ni::*http-proxy-port* 8080)

; bat
(export 'ed::winbatch-mode "ed")
(autoload 'winbatch-mode "winbatch-mode" t)
(pushnew '("\\.bat$" . winbatch-mode) *auto-mode-alist* :test 'equal)

; as
(export 'ed::actionscript-mode "ed")
(autoload 'actionscript-mode "actionscript-mode" t)
(pushnew '("\\.asc?$" . actionscript-mode) *auto-mode-alist* :test 'equal)
(setq ed::*actionscript-mode-autosave-as-utf8* t)

; css
(export 'ed::css+-mode "ed")
(autoload 'css+-mode "css+-mode" t)
(pushnew '("\\.css$" . css+-mode) *auto-mode-alist* :test 'equal)

; html
(export 'ed::html+-mode "ed")
(autoload 'html+-mode "html+-mode" t)
(pushnew '("\\.hta?$" . html+-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.html?$" . html+-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.php?$" . html+-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.xhtml?$" . html+-mode) *auto-mode-alist* :test 'equal)

; ini
(export 'ed::ini-mode "ed")
(autoload 'ini-mode "ini-mode" t)
(pushnew '("\\.ini$" . ini-mode) *auto-mode-alist* :test 'equal)

; javascript
(require "javascript-mode")
(export 'ed::javascript-mode "ed")
(autoload 'javascript-mode "javascript-mode" t)
(pushnew '("\\.htc$" . javascript-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.js$" . javascript-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.json$" . javascript-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.wsf$" . javascript-mode) *auto-mode-alist* :test 'equal)
(let ((keymap (make-sparse-keymap)))
  (define-key keymap #\TAB 'my-dabbrev-expand)
  (add-hook '*create-buffer-hook*
    #'(lambda (buffer)
        (set-minor-mode-map keymap buffer))))
  (defun my-dabbrev-expand()
    "dabbrev-expand"
    (interactive)
    (if (string-matchp "[0-9A-Z#$%&+._-]" (string (preceding-char)))
        (dabbrev-expand)
      (funcall mode-specific-indent-command)))

; php
(load-library "php-mode")
(pushnew '("\\.php$" . php-mode) *auto-mode-alist*)

; xml
(require "xml/xslt")
(pushnew '("\\.mxml$" . xml-mode) *auto-mode-alist* :test 'equal)
(pushnew '("\\.xul$" . xml-mode) *auto-mode-alist* :test 'equal)

; multi
(load-library "multi-major-mode.l")
(defun multi-html-mode ()
  (multi-mode t "html+-mode"
			  '("<!--" "-->" "text-mode")
			  '("<![CDATA" "]]>" "text-mode")
			  '("<pre" "</pre>" "text-mode")
			  '("<textarea" "</textarea>" "text-mode")
			  '("<style" "</style>" "css+-mode")
			  '("<script" "</script>" "javascript-mode")
			  '("<?php" "?>" "php-mode")
			  )
  )
(add-hook 'ed::*html+-mode-hook* 'multi-html-mode)
